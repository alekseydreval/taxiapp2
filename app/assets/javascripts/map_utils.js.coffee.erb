class TaxiApp.Map

  # Show map after initializtion
  constructor: ->
    @markerColors = ['red', 'darkened', 'orange', 'green', 'darkgreen',
                     'blue', 'darkblue', 'purple', 'darkpurple', 'cadetblue']
    @driverMarkers = []
    @map = window.map
    @map

  updateDriversListAndPositions: (obj) =>
    @updateDriversPositions(obj)
    $('#drivers_online').html JST["drivers_list"](positions : obj.positions)

  updateDriversPositions: (obj) =>
    console.log 'updating map'
    
    if obj && obj.positions && obj.positions.length
      console.log obj.positions

      if $('.assigned_driver').length
        id = eval($('.assigned_driver').attr('data-driver'))
        obj.positions = _.reject obj.positions, (pos) =>
          parseInt(pos.driver_id, 10) == id && @_moveOrAddDriver(pos, 'green') && true
      else if $('.suggested_drivers').length
        ids = eval($('.suggested_drivers').attr('data-drivers'))
        obj.positions = _.reject obj.positions, (pos) =>
          _.contains(ids, parseInt(pos.driver_id)) && @_moveOrAddDriver(pos, 'darkorange') && true
      
      for position in obj.positions
        @_moveOrAddDriver(position, 'blue')

  showDriverEndpoints: ->
    if $("#map").attr('data-positions')
      bounds = []
      positions = $("#map").data('positions').slice()
      if $("#map").attr('current')
        positions.push $("#map").data('current')
      @currentDriver.clearLayers()
      for pos in positions
        marker = @createMarker(pos['latlng'])
        bounds.push pos['latlng']
        marker.bindPopup pos['type']
        @currentDriver.addLayer marker

  showCurrentLocationRealTime: ->
    TaxiApp.Utils.getMyCoords (latlng) =>
      current = { latlng: [ latlng[0], latlng[1] ], type: 'current' }
      $('#map').data('current', current)
      bounds = []
      if $("#map").attr('data-positions')
        positions = $("#map").data('positions').slice()
      else
        $("#map").data('positions', [])
        positions = $("#map").data('positions')
      positions.push current
      @currentDriver.clearLayers()
      for pos in positions
        marker = @createMarker(pos['latlng'])
        bounds.push pos['latlng']
        marker.bindPopup pos['type']
        @currentDriver.addLayer marker
      @fitBoundsToMarkers()
    , watch : true

  fitBoundsToMarkers: ->
    bounds = []
    markers = @currentDriver.eachLayer (layer) ->
      bounds.push layer.getLatLng()
    @map.fitBounds bounds

  addMarkerAndSetView: (callback) ->
    TaxiApp.Utils.getMyCoords (latlng) =>
      @map.setView latlng, 14
      marker = @createMarker(latlng)
      @currentDriver.addLayer marker
      callback(latlng) if callback


  ####################
  # Internal methods #
  ####################

  createMarker: (driver, color) ->
    marker = new ymaps.Placemark(driver.latlng, { hintContent: driver.username, balloonContent: driver.username },
                                 { preset: "twirl##{color}Icon" })
    window.map.geoObjects.add(marker)
    marker

  checkAndCollectData: (names) ->
    names = [names] unless names instanceof Array
    data = {}
    for name in names
      return unless val = $("#map").data(name)
      data[name] = val
    data

  _colorForDriver: (id) ->
    color = @markerColors[id % (@markerColors.length-1)]
    console.log id, color
    color

  _moveOrAddDriver: (driver, color = 'blue') ->
    id = driver.driver_id
    if !@driverMarkers[id]
      @driverMarkers[id] = @createMarker driver, color
      # @allDrivers.addLayer @driverMarkers[id]
      # @layersControl.addOverlay @driverMarkers[id], "Driver #{id}"
    else
      @driverMarkers[id].editor.geometry.setCoordinates(driver.latlng)
